name: Deploy Plugin

on:
  workflow_call:
    inputs:
      public_name:
        required: true
        type: string
        description: 'the name the user can see'
      internal_name:
        required: true
        type: string
        description: 'the assembly name'
      project_dir:
        required: true
        type: string
        description: 'folder containing csproj'
      project_name:
        required: true
        type: string
        description: 'csproj file name'
      owners:
        required: true
        type: string
        description: 'the plugin owners, comma separated'
      version_change:
        required: true
        type: string
        description: 'which version component is being incremented (MAJOR, MINOR, PATCH, or NONE)'
      deployment_type:
        required: true
        type: string
        description: 'stable or testing'
      github_username:
        required: true
        type: string
        description: 'GitHub username for commits'
      github_email:
        required: true
        type: string
        description: 'GitHub email for commits'
      open_pr:
        required: false
        type: boolean
        description: 'open pull request?'
        default: false
      force_push:
        required: false
        type: boolean
        description: 'force push the version change commit?'
        default: false
    secrets:
      DEPLOY_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ inputs.deployment_type == 'stable' || inputs.deployment_type == 'testing' }}
    env:
      PUBLIC_NAME: ${{ inputs.public_name }}
      INTERNAL_NAME: ${{ inputs.internal_name }}
      PROJECT_DIR: ${{ inputs.project_dir }}
      PROJECT_NAME: ${{ inputs.project_name }}
      OWNERS: ${{ inputs.owners }}
      VERSION_CHANGE: ${{ inputs.version_change }}
      DEPLOYMENT_TYPE: ${{ inputs.deployment_type }}
      GITHUB_USERNAME: ${{ inputs.github_username }}
      GITHUB_EMAIL: ${{ inputs.github_email }}
      OPEN_PR: ${{ inputs.open_pr }}
      FORCE_PUSH: ${{ inputs.force_push }}
      CSPROJ_PATH: ${{ inputs.project_dir }}/${{ inputs.project_name }}.csproj
    steps:
    - name: validate inputs
      run: |
        v_change="${VERSION_CHANGE,,}"
        echo "VERSION_CHANGE=$v_change" >> $GITHUB_ENV
        if [[ ! " major minor patch " =~ [[:space:]]${v_change}[[:space:]] ]]; then
          echo "invalid value for version_change: $VERSION_CHANGE"
          exit 1
        fi
        
        if [[ "v_change" == "none" ]]; then
          if [[ "$DEPLOYMENT_TYPE" == "testing" ]]; then
            echo "version_change cannot be 'NONE' for deployment_type 'testing'"
            exit 1
          fi
        else
          if [[ "$DEPLOYMENT_TYPE" == "stable" ]]; then
            echo "version_change cannot be '$VERSION_CHANGE' for deployment_type 'stable'"
            exit 1
          fi
        fi

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Git and GitHub CLI
      run: |
        echo ${{ secrets.DEPLOY_TOKEN }} | gh auth login --with-token
        echo "GitHub CLI authentication successful."
        git config --global user.name "${GITHUB_USERNAME}"
        git config --global user.email "${GITHUB_EMAIL}"
        echo "Git configuration set for author: ${GITHUB_USERNAME} <${GITHUB_EMAIL}>"

    - name: Determine Version
      if: inputs.version_change != 'none'
      run: |
        current_version=$(sed -n "s:.*<Version>\([^<]*\)</Version>.*:\1:p" "$CSPROJ_PATH")
        version_components=($(echo "$current_version" | tr . ' '))
        component_order=(major minor patch)
        for i in $(seq 3 -1 0); do
          [[ "$VERSION_CHANGE" == "${component_order[$i]}" ]] && this_component=true || this_component=false
          version_components[$i]=$([[ $this_component == true ]] && echo "$((${version_components[$i]} + 1))" || echo 0)
          [[ $this_component == true ]] && break
        done
        
        new_version=`echo ${version_components[@]} | tr ' ' .`
        echo "VERSION=$new_version" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
        echo "new version computed as: $new_version"

    - name: Update .csproj Version
      run: |
        sed -i "s:<Version>[^<]*</Version>:<Version>$VERSION</Version>:" "$CSPROJ_PATH"
        echo "Updated .csproj version at $CSPROJ_PATH from $CURRENT_VERSION to $VERSION"

    - name: Commit .csproj Changes
      run: |
        git add "$PROJECT_DIR/$PROJECT_NAME.csproj"
        git commit -m "[release] v${VERSION} (${VERSION_CHANGE})"
        echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "Committed .csproj changes."

    - name: Push .csproj Version Changes
      run: |
        ref="HEAD:${{ github.ref_name }}"
        if [[ $FORCE_PUSH == true ]]; then
          echo "force pushing: $ref"
          ref="+$ref"
        fi
        git push origin "$ref"
        echo "Pushed .csproj version changes to the repository."

    - name: Tag release
      run: |
        git tag "$VERSION" HEAD
        git push origin "$VERSION"
        echo "Pushed .csproj version changes to the repository."

    - name: Get Dalamud Plugins Repo and Set Up Branch
      run: |
        REPO_URL_WITH_TOKEN="https://${{ secrets.DEPLOY_TOKEN }}@github.com/${{ inputs.github_username }}/DalamudPluginsD17.git"
        BRANCH=$(echo "${PUBLIC_NAME}-${DEPLOYMENT_TYPE}" | sed 's:[a-z0-9][A-Z]:\1-\2:g' | tr '[:upper:]' '[:lower:]')
        git clone "$REPO_URL_WITH_TOKEN" repo
        cd repo
        git remote add pr_repo "https://github.com/goatcorp/DalamudPluginsD17.git"
        git fetch pr_repo
        git fetch origin
        echo "> Configured origin URL with token"
        
        # Ensure this matches the BRANCH format set by the "Set Branch Name" step
        if git show-ref --quiet "refs/heads/${BRANCH}"; then
            echo "> Branch ${BRANCH} already exists, resetting to main"
            git checkout "${BRANCH}"
            git reset --hard "pr_repo/main"
        else
            echo "> Branch ${BRANCH} does not exist, creating new branch"
            git checkout -b "${BRANCH}" "pr_repo/main"
        fi
        git push --force --set-upstream origin "${BRANCH}"
        echo "Branch setup complete for ${BRANCH}."
        cd ..

    - name: compute deploy path
      run: |
        if [[ "${DEPLOYMENT_TYPE}" == "stable" ]]; then
          echo "DEPLOY_PATH=repo/stable/$INTERNAL_NAME" >> $GITHUB_ENV
        else
          echo "DEPLOY_PATH=repo/testing/live/$INTERNAL_NAME" >> $GITHUB_ENV
        fi

    - name: Create Plugin Manifest Directory
      run: |
        if [[ ! -d "$DEPLOY_PATH" ]]; then
          mkdir -p "$DEPLOY_PATH"
          echo "Created manifest directory for $INTERNAL_NAME."
        else
          echo "Manifest directory exists."
        fi

    - name: Copy Plugin TOML Manifest from testing to stable
      if: inputs.deployment_type == 'stable'
      run: |
        cp -f "repo/testing/live/${INTERNAL_NAME}/manifest.toml" "repo/stable/${INTERNAL_NAME}/manifest.toml"
        echo "Copied TOML manifest from testing to stable."

    - name: Create Plugin TOML Manifest
      if: inputs.version_change != 'none'
      run: |
        cd "$DEPLOY_PATH"
        if [[ -f manifest.toml ]]; then
          echo "deleting existing manifest..."
        fi
        echo "[plugin]" > manifest.toml
        echo "repository = \"${{ github.server_url }}/${{ github.repository }}.git\"" >> manifest.toml
        echo "owners = [ \"${OWNERS//,/\", \"}\" ]" >> manifest.toml
        echo "project_path = \"$PROJECT_NAME\"" >> manifest.toml
        echo "commit = \"$COMMIT_SHA\"" >> manifest.toml
        echo "created manifest.toml:"
        cat manifest.toml

    - name: Add and Commit Changes
      run: |
        COMMIT_MESSAGE="[$DEPLOYMENT_TYPE] $PUBLIC_NAME v$VERSION"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        cd repo
        git add --all
        git commit -m "$COMMIT_MESSAGE"
        echo "Added and committed all changes with message: $COMMIT_MESSAGE"

    - name: Push Changes
      run: |
        cd repo
        git push --force --set-upstream origin "${BRANCH}" -v
        echo "Pushed changes to branch ${BRANCH}."

    - name: Open a Pull Request
      if: inputs.open_pr == 'true'
      run: |
        gh pr create --title "$COMMIT_MESSAGE" --body "Release of $PUBLIC_NAME version $VERSION" --head "${GITHUB_USERNAME}:${BRANCH}" --base main --repo goatcorp/DalamudPluginsD17
        echo "Opened a PR for $PUBLIC_NAME v$VERSION"

    - name: Done
      run: echo "Deploy $DEPLOYMENT_TYPE Done"
